public class BSTree<T extends comparable<T>> {
    private class Node{
	T data;
        Node left;
	Node right;
	public void setValue(T value){
	    data= value;
	}
	public void setLeft(Node value){
	    left= value;
	}
	public void setRight(Node value){
	    right= value;
	}
	public T getValue(){
	    return data;
	}
	public Node getLeft(){
	    return left;
	}
	public Node getRight(){
	    return right;
	}

	public void add(T value){
	}

	public String toString() {
	}
	private String toString(Node x){
	    String ans= "" + data;
	    if (left == null || right == null){
		ans += "_";
	    }
	    ans += toString(left)+ toString(right);
	    return ans;
	}

	public boolean contains(T value){
	}
	private boolean contains(T value, Node x){
	    if (!data.equals(value) && (left == null || right == null)){
		return false;
	    }
	    if (data.equals(value)){
		return true;
	    }
	    if (contains(value,left) == true || contains(value,right)== true){
		return true;
	    }
	}

	public int getHeight()  {
	    if (getHeight(left) > getHeight(right)){
		return getHeight(left);
	    } 
	    else{
		return getHeight(right);
	    }
	}
	public int getHeight(Node x){
	    if (left.equals(null) && right.equals(null)){
		return 1;
	    }
	    int leftsum=0;
	    int rightsum=0;
	    if (!left.equals(null)){
		leftsum += getHeight(left);
	    }
	    else if (!right.equals(null)){
		rightsum += getHeight(right);
	    }
	    if (leftsum > rightsum){
		return leftsum+1;
	    }
	    else{
		return rightsum+1;
	    }
	}
    
    }
    private Node root;

    public void add(T value){
    }
    public String toString() {
    }
    public boolean contains(T value){
    }
    public int getHeight()  {
    }
   
}
